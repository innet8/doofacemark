// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"checkin/query/model"
)

func newCheckinDevice(db *gorm.DB, opts ...gen.DOOption) checkinDevice {
	_checkinDevice := checkinDevice{}

	_checkinDevice.checkinDeviceDo.UseDB(db, opts...)
	_checkinDevice.checkinDeviceDo.UseModel(&model.CheckinDevice{})

	tableName := _checkinDevice.checkinDeviceDo.TableName()
	_checkinDevice.ALL = field.NewAsterisk(tableName)
	_checkinDevice.ID = field.NewInt(tableName, "id")
	_checkinDevice.Sn = field.NewString(tableName, "sn")
	_checkinDevice.Devinfo = field.NewString(tableName, "devinfo")
	_checkinDevice.CreatedAt = field.NewTime(tableName, "created_at")
	_checkinDevice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_checkinDevice.fillFieldMap()

	return _checkinDevice
}

type checkinDevice struct {
	checkinDeviceDo checkinDeviceDo

	ALL       field.Asterisk
	ID        field.Int
	Sn        field.String
	Devinfo   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c checkinDevice) Table(newTableName string) *checkinDevice {
	c.checkinDeviceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkinDevice) As(alias string) *checkinDevice {
	c.checkinDeviceDo.DO = *(c.checkinDeviceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkinDevice) updateTableName(table string) *checkinDevice {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.Sn = field.NewString(table, "sn")
	c.Devinfo = field.NewString(table, "devinfo")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *checkinDevice) WithContext(ctx context.Context) ICheckinDeviceDo {
	return c.checkinDeviceDo.WithContext(ctx)
}

func (c checkinDevice) TableName() string { return c.checkinDeviceDo.TableName() }

func (c checkinDevice) Alias() string { return c.checkinDeviceDo.Alias() }

func (c checkinDevice) Columns(cols ...field.Expr) gen.Columns {
	return c.checkinDeviceDo.Columns(cols...)
}

func (c *checkinDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkinDevice) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["sn"] = c.Sn
	c.fieldMap["devinfo"] = c.Devinfo
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c checkinDevice) clone(db *gorm.DB) checkinDevice {
	c.checkinDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkinDevice) replaceDB(db *gorm.DB) checkinDevice {
	c.checkinDeviceDo.ReplaceDB(db)
	return c
}

type checkinDeviceDo struct{ gen.DO }

type ICheckinDeviceDo interface {
	gen.SubQuery
	Debug() ICheckinDeviceDo
	WithContext(ctx context.Context) ICheckinDeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckinDeviceDo
	WriteDB() ICheckinDeviceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckinDeviceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckinDeviceDo
	Not(conds ...gen.Condition) ICheckinDeviceDo
	Or(conds ...gen.Condition) ICheckinDeviceDo
	Select(conds ...field.Expr) ICheckinDeviceDo
	Where(conds ...gen.Condition) ICheckinDeviceDo
	Order(conds ...field.Expr) ICheckinDeviceDo
	Distinct(cols ...field.Expr) ICheckinDeviceDo
	Omit(cols ...field.Expr) ICheckinDeviceDo
	Join(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo
	Group(cols ...field.Expr) ICheckinDeviceDo
	Having(conds ...gen.Condition) ICheckinDeviceDo
	Limit(limit int) ICheckinDeviceDo
	Offset(offset int) ICheckinDeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckinDeviceDo
	Unscoped() ICheckinDeviceDo
	Create(values ...*model.CheckinDevice) error
	CreateInBatches(values []*model.CheckinDevice, batchSize int) error
	Save(values ...*model.CheckinDevice) error
	First() (*model.CheckinDevice, error)
	Take() (*model.CheckinDevice, error)
	Last() (*model.CheckinDevice, error)
	Find() ([]*model.CheckinDevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckinDevice, err error)
	FindInBatches(result *[]*model.CheckinDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CheckinDevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckinDeviceDo
	Assign(attrs ...field.AssignExpr) ICheckinDeviceDo
	Joins(fields ...field.RelationField) ICheckinDeviceDo
	Preload(fields ...field.RelationField) ICheckinDeviceDo
	FirstOrInit() (*model.CheckinDevice, error)
	FirstOrCreate() (*model.CheckinDevice, error)
	FindByPage(offset int, limit int) (result []*model.CheckinDevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckinDeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkinDeviceDo) Debug() ICheckinDeviceDo {
	return c.withDO(c.DO.Debug())
}

func (c checkinDeviceDo) WithContext(ctx context.Context) ICheckinDeviceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkinDeviceDo) ReadDB() ICheckinDeviceDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkinDeviceDo) WriteDB() ICheckinDeviceDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkinDeviceDo) Session(config *gorm.Session) ICheckinDeviceDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkinDeviceDo) Clauses(conds ...clause.Expression) ICheckinDeviceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkinDeviceDo) Returning(value interface{}, columns ...string) ICheckinDeviceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkinDeviceDo) Not(conds ...gen.Condition) ICheckinDeviceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkinDeviceDo) Or(conds ...gen.Condition) ICheckinDeviceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkinDeviceDo) Select(conds ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkinDeviceDo) Where(conds ...gen.Condition) ICheckinDeviceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkinDeviceDo) Order(conds ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkinDeviceDo) Distinct(cols ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkinDeviceDo) Omit(cols ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkinDeviceDo) Join(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkinDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkinDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkinDeviceDo) Group(cols ...field.Expr) ICheckinDeviceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkinDeviceDo) Having(conds ...gen.Condition) ICheckinDeviceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkinDeviceDo) Limit(limit int) ICheckinDeviceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkinDeviceDo) Offset(offset int) ICheckinDeviceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkinDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckinDeviceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkinDeviceDo) Unscoped() ICheckinDeviceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkinDeviceDo) Create(values ...*model.CheckinDevice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkinDeviceDo) CreateInBatches(values []*model.CheckinDevice, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkinDeviceDo) Save(values ...*model.CheckinDevice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkinDeviceDo) First() (*model.CheckinDevice, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDevice), nil
	}
}

func (c checkinDeviceDo) Take() (*model.CheckinDevice, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDevice), nil
	}
}

func (c checkinDeviceDo) Last() (*model.CheckinDevice, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDevice), nil
	}
}

func (c checkinDeviceDo) Find() ([]*model.CheckinDevice, error) {
	result, err := c.DO.Find()
	return result.([]*model.CheckinDevice), err
}

func (c checkinDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckinDevice, err error) {
	buf := make([]*model.CheckinDevice, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkinDeviceDo) FindInBatches(result *[]*model.CheckinDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkinDeviceDo) Attrs(attrs ...field.AssignExpr) ICheckinDeviceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkinDeviceDo) Assign(attrs ...field.AssignExpr) ICheckinDeviceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkinDeviceDo) Joins(fields ...field.RelationField) ICheckinDeviceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkinDeviceDo) Preload(fields ...field.RelationField) ICheckinDeviceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkinDeviceDo) FirstOrInit() (*model.CheckinDevice, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDevice), nil
	}
}

func (c checkinDeviceDo) FirstOrCreate() (*model.CheckinDevice, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDevice), nil
	}
}

func (c checkinDeviceDo) FindByPage(offset int, limit int) (result []*model.CheckinDevice, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkinDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkinDeviceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkinDeviceDo) Delete(models ...*model.CheckinDevice) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkinDeviceDo) withDO(do gen.Dao) *checkinDeviceDo {
	c.DO = *do.(*gen.DO)
	return c
}
