// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"checkin/query/model"
)

func newCheckinDeviceUser(db *gorm.DB, opts ...gen.DOOption) checkinDeviceUser {
	_checkinDeviceUser := checkinDeviceUser{}

	_checkinDeviceUser.checkinDeviceUserDo.UseDB(db, opts...)
	_checkinDeviceUser.checkinDeviceUserDo.UseModel(&model.CheckinDeviceUser{})

	tableName := _checkinDeviceUser.checkinDeviceUserDo.TableName()
	_checkinDeviceUser.ALL = field.NewAsterisk(tableName)
	_checkinDeviceUser.ID = field.NewInt(tableName, "id")
	_checkinDeviceUser.Sn = field.NewString(tableName, "sn")
	_checkinDeviceUser.Enrollid = field.NewInt(tableName, "enrollid")
	_checkinDeviceUser.Name = field.NewString(tableName, "name")
	_checkinDeviceUser.Backupnum = field.NewInt(tableName, "backupnum")
	_checkinDeviceUser.Admin = field.NewInt(tableName, "admin")
	_checkinDeviceUser.Record = field.NewString(tableName, "record")
	_checkinDeviceUser.Status = field.NewInt(tableName, "status")
	_checkinDeviceUser.CreatedAt = field.NewTime(tableName, "created_at")
	_checkinDeviceUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkinDeviceUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_checkinDeviceUser.fillFieldMap()

	return _checkinDeviceUser
}

type checkinDeviceUser struct {
	checkinDeviceUserDo checkinDeviceUserDo

	ALL       field.Asterisk
	ID        field.Int
	Sn        field.String
	Enrollid  field.Int
	Name      field.String
	Backupnum field.Int
	Admin     field.Int
	Record    field.String
	Status    field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (c checkinDeviceUser) Table(newTableName string) *checkinDeviceUser {
	c.checkinDeviceUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkinDeviceUser) As(alias string) *checkinDeviceUser {
	c.checkinDeviceUserDo.DO = *(c.checkinDeviceUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkinDeviceUser) updateTableName(table string) *checkinDeviceUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.Sn = field.NewString(table, "sn")
	c.Enrollid = field.NewInt(table, "enrollid")
	c.Name = field.NewString(table, "name")
	c.Backupnum = field.NewInt(table, "backupnum")
	c.Admin = field.NewInt(table, "admin")
	c.Record = field.NewString(table, "record")
	c.Status = field.NewInt(table, "status")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *checkinDeviceUser) WithContext(ctx context.Context) ICheckinDeviceUserDo {
	return c.checkinDeviceUserDo.WithContext(ctx)
}

func (c checkinDeviceUser) TableName() string { return c.checkinDeviceUserDo.TableName() }

func (c checkinDeviceUser) Alias() string { return c.checkinDeviceUserDo.Alias() }

func (c checkinDeviceUser) Columns(cols ...field.Expr) gen.Columns {
	return c.checkinDeviceUserDo.Columns(cols...)
}

func (c *checkinDeviceUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkinDeviceUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["sn"] = c.Sn
	c.fieldMap["enrollid"] = c.Enrollid
	c.fieldMap["name"] = c.Name
	c.fieldMap["backupnum"] = c.Backupnum
	c.fieldMap["admin"] = c.Admin
	c.fieldMap["record"] = c.Record
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c checkinDeviceUser) clone(db *gorm.DB) checkinDeviceUser {
	c.checkinDeviceUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkinDeviceUser) replaceDB(db *gorm.DB) checkinDeviceUser {
	c.checkinDeviceUserDo.ReplaceDB(db)
	return c
}

type checkinDeviceUserDo struct{ gen.DO }

type ICheckinDeviceUserDo interface {
	gen.SubQuery
	Debug() ICheckinDeviceUserDo
	WithContext(ctx context.Context) ICheckinDeviceUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckinDeviceUserDo
	WriteDB() ICheckinDeviceUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckinDeviceUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckinDeviceUserDo
	Not(conds ...gen.Condition) ICheckinDeviceUserDo
	Or(conds ...gen.Condition) ICheckinDeviceUserDo
	Select(conds ...field.Expr) ICheckinDeviceUserDo
	Where(conds ...gen.Condition) ICheckinDeviceUserDo
	Order(conds ...field.Expr) ICheckinDeviceUserDo
	Distinct(cols ...field.Expr) ICheckinDeviceUserDo
	Omit(cols ...field.Expr) ICheckinDeviceUserDo
	Join(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo
	Group(cols ...field.Expr) ICheckinDeviceUserDo
	Having(conds ...gen.Condition) ICheckinDeviceUserDo
	Limit(limit int) ICheckinDeviceUserDo
	Offset(offset int) ICheckinDeviceUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckinDeviceUserDo
	Unscoped() ICheckinDeviceUserDo
	Create(values ...*model.CheckinDeviceUser) error
	CreateInBatches(values []*model.CheckinDeviceUser, batchSize int) error
	Save(values ...*model.CheckinDeviceUser) error
	First() (*model.CheckinDeviceUser, error)
	Take() (*model.CheckinDeviceUser, error)
	Last() (*model.CheckinDeviceUser, error)
	Find() ([]*model.CheckinDeviceUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckinDeviceUser, err error)
	FindInBatches(result *[]*model.CheckinDeviceUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CheckinDeviceUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckinDeviceUserDo
	Assign(attrs ...field.AssignExpr) ICheckinDeviceUserDo
	Joins(fields ...field.RelationField) ICheckinDeviceUserDo
	Preload(fields ...field.RelationField) ICheckinDeviceUserDo
	FirstOrInit() (*model.CheckinDeviceUser, error)
	FirstOrCreate() (*model.CheckinDeviceUser, error)
	FindByPage(offset int, limit int) (result []*model.CheckinDeviceUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckinDeviceUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkinDeviceUserDo) Debug() ICheckinDeviceUserDo {
	return c.withDO(c.DO.Debug())
}

func (c checkinDeviceUserDo) WithContext(ctx context.Context) ICheckinDeviceUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkinDeviceUserDo) ReadDB() ICheckinDeviceUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkinDeviceUserDo) WriteDB() ICheckinDeviceUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkinDeviceUserDo) Session(config *gorm.Session) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkinDeviceUserDo) Clauses(conds ...clause.Expression) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkinDeviceUserDo) Returning(value interface{}, columns ...string) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkinDeviceUserDo) Not(conds ...gen.Condition) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkinDeviceUserDo) Or(conds ...gen.Condition) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkinDeviceUserDo) Select(conds ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkinDeviceUserDo) Where(conds ...gen.Condition) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkinDeviceUserDo) Order(conds ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkinDeviceUserDo) Distinct(cols ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkinDeviceUserDo) Omit(cols ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkinDeviceUserDo) Join(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkinDeviceUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkinDeviceUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkinDeviceUserDo) Group(cols ...field.Expr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkinDeviceUserDo) Having(conds ...gen.Condition) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkinDeviceUserDo) Limit(limit int) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkinDeviceUserDo) Offset(offset int) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkinDeviceUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkinDeviceUserDo) Unscoped() ICheckinDeviceUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkinDeviceUserDo) Create(values ...*model.CheckinDeviceUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkinDeviceUserDo) CreateInBatches(values []*model.CheckinDeviceUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkinDeviceUserDo) Save(values ...*model.CheckinDeviceUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkinDeviceUserDo) First() (*model.CheckinDeviceUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDeviceUser), nil
	}
}

func (c checkinDeviceUserDo) Take() (*model.CheckinDeviceUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDeviceUser), nil
	}
}

func (c checkinDeviceUserDo) Last() (*model.CheckinDeviceUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDeviceUser), nil
	}
}

func (c checkinDeviceUserDo) Find() ([]*model.CheckinDeviceUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.CheckinDeviceUser), err
}

func (c checkinDeviceUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckinDeviceUser, err error) {
	buf := make([]*model.CheckinDeviceUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkinDeviceUserDo) FindInBatches(result *[]*model.CheckinDeviceUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkinDeviceUserDo) Attrs(attrs ...field.AssignExpr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkinDeviceUserDo) Assign(attrs ...field.AssignExpr) ICheckinDeviceUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkinDeviceUserDo) Joins(fields ...field.RelationField) ICheckinDeviceUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkinDeviceUserDo) Preload(fields ...field.RelationField) ICheckinDeviceUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkinDeviceUserDo) FirstOrInit() (*model.CheckinDeviceUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDeviceUser), nil
	}
}

func (c checkinDeviceUserDo) FirstOrCreate() (*model.CheckinDeviceUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckinDeviceUser), nil
	}
}

func (c checkinDeviceUserDo) FindByPage(offset int, limit int) (result []*model.CheckinDeviceUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkinDeviceUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkinDeviceUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkinDeviceUserDo) Delete(models ...*model.CheckinDeviceUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkinDeviceUserDo) withDO(do gen.Dao) *checkinDeviceUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
