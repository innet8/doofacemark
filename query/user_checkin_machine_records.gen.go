// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"checkin/query/model"
)

func newUserCheckinMachineRecord(db *gorm.DB, opts ...gen.DOOption) userCheckinMachineRecord {
	_userCheckinMachineRecord := userCheckinMachineRecord{}

	_userCheckinMachineRecord.userCheckinMachineRecordDo.UseDB(db, opts...)
	_userCheckinMachineRecord.userCheckinMachineRecordDo.UseModel(&model.UserCheckinMachineRecord{})

	tableName := _userCheckinMachineRecord.userCheckinMachineRecordDo.TableName()
	_userCheckinMachineRecord.ALL = field.NewAsterisk(tableName)
	_userCheckinMachineRecord.ID = field.NewInt(tableName, "id")
	_userCheckinMachineRecord.Sn = field.NewString(tableName, "sn")
	_userCheckinMachineRecord.Mode = field.NewInt(tableName, "mode")
	_userCheckinMachineRecord.Inout = field.NewInt(tableName, "inout")
	_userCheckinMachineRecord.Event = field.NewInt(tableName, "event")
	_userCheckinMachineRecord.Enrollid = field.NewInt(tableName, "enrollid")
	_userCheckinMachineRecord.ReportTime = field.NewTime(tableName, "report_time")
	_userCheckinMachineRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_userCheckinMachineRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userCheckinMachineRecord.fillFieldMap()

	return _userCheckinMachineRecord
}

type userCheckinMachineRecord struct {
	userCheckinMachineRecordDo userCheckinMachineRecordDo

	ALL        field.Asterisk
	ID         field.Int
	Sn         field.String
	Mode       field.Int
	Inout      field.Int
	Event      field.Int
	Enrollid   field.Int
	ReportTime field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (u userCheckinMachineRecord) Table(newTableName string) *userCheckinMachineRecord {
	u.userCheckinMachineRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCheckinMachineRecord) As(alias string) *userCheckinMachineRecord {
	u.userCheckinMachineRecordDo.DO = *(u.userCheckinMachineRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCheckinMachineRecord) updateTableName(table string) *userCheckinMachineRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.Sn = field.NewString(table, "sn")
	u.Mode = field.NewInt(table, "mode")
	u.Inout = field.NewInt(table, "inout")
	u.Event = field.NewInt(table, "event")
	u.Enrollid = field.NewInt(table, "enrollid")
	u.ReportTime = field.NewTime(table, "report_time")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userCheckinMachineRecord) WithContext(ctx context.Context) IUserCheckinMachineRecordDo {
	return u.userCheckinMachineRecordDo.WithContext(ctx)
}

func (u userCheckinMachineRecord) TableName() string { return u.userCheckinMachineRecordDo.TableName() }

func (u userCheckinMachineRecord) Alias() string { return u.userCheckinMachineRecordDo.Alias() }

func (u userCheckinMachineRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userCheckinMachineRecordDo.Columns(cols...)
}

func (u *userCheckinMachineRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCheckinMachineRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["sn"] = u.Sn
	u.fieldMap["mode"] = u.Mode
	u.fieldMap["inout"] = u.Inout
	u.fieldMap["event"] = u.Event
	u.fieldMap["enrollid"] = u.Enrollid
	u.fieldMap["report_time"] = u.ReportTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userCheckinMachineRecord) clone(db *gorm.DB) userCheckinMachineRecord {
	u.userCheckinMachineRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCheckinMachineRecord) replaceDB(db *gorm.DB) userCheckinMachineRecord {
	u.userCheckinMachineRecordDo.ReplaceDB(db)
	return u
}

type userCheckinMachineRecordDo struct{ gen.DO }

type IUserCheckinMachineRecordDo interface {
	gen.SubQuery
	Debug() IUserCheckinMachineRecordDo
	WithContext(ctx context.Context) IUserCheckinMachineRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCheckinMachineRecordDo
	WriteDB() IUserCheckinMachineRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCheckinMachineRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCheckinMachineRecordDo
	Not(conds ...gen.Condition) IUserCheckinMachineRecordDo
	Or(conds ...gen.Condition) IUserCheckinMachineRecordDo
	Select(conds ...field.Expr) IUserCheckinMachineRecordDo
	Where(conds ...gen.Condition) IUserCheckinMachineRecordDo
	Order(conds ...field.Expr) IUserCheckinMachineRecordDo
	Distinct(cols ...field.Expr) IUserCheckinMachineRecordDo
	Omit(cols ...field.Expr) IUserCheckinMachineRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo
	Group(cols ...field.Expr) IUserCheckinMachineRecordDo
	Having(conds ...gen.Condition) IUserCheckinMachineRecordDo
	Limit(limit int) IUserCheckinMachineRecordDo
	Offset(offset int) IUserCheckinMachineRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCheckinMachineRecordDo
	Unscoped() IUserCheckinMachineRecordDo
	Create(values ...*model.UserCheckinMachineRecord) error
	CreateInBatches(values []*model.UserCheckinMachineRecord, batchSize int) error
	Save(values ...*model.UserCheckinMachineRecord) error
	First() (*model.UserCheckinMachineRecord, error)
	Take() (*model.UserCheckinMachineRecord, error)
	Last() (*model.UserCheckinMachineRecord, error)
	Find() ([]*model.UserCheckinMachineRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCheckinMachineRecord, err error)
	FindInBatches(result *[]*model.UserCheckinMachineRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCheckinMachineRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCheckinMachineRecordDo
	Assign(attrs ...field.AssignExpr) IUserCheckinMachineRecordDo
	Joins(fields ...field.RelationField) IUserCheckinMachineRecordDo
	Preload(fields ...field.RelationField) IUserCheckinMachineRecordDo
	FirstOrInit() (*model.UserCheckinMachineRecord, error)
	FirstOrCreate() (*model.UserCheckinMachineRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserCheckinMachineRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCheckinMachineRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCheckinMachineRecordDo) Debug() IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userCheckinMachineRecordDo) WithContext(ctx context.Context) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCheckinMachineRecordDo) ReadDB() IUserCheckinMachineRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCheckinMachineRecordDo) WriteDB() IUserCheckinMachineRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCheckinMachineRecordDo) Session(config *gorm.Session) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCheckinMachineRecordDo) Clauses(conds ...clause.Expression) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCheckinMachineRecordDo) Returning(value interface{}, columns ...string) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCheckinMachineRecordDo) Not(conds ...gen.Condition) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCheckinMachineRecordDo) Or(conds ...gen.Condition) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCheckinMachineRecordDo) Select(conds ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCheckinMachineRecordDo) Where(conds ...gen.Condition) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCheckinMachineRecordDo) Order(conds ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCheckinMachineRecordDo) Distinct(cols ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCheckinMachineRecordDo) Omit(cols ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCheckinMachineRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCheckinMachineRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCheckinMachineRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCheckinMachineRecordDo) Group(cols ...field.Expr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCheckinMachineRecordDo) Having(conds ...gen.Condition) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCheckinMachineRecordDo) Limit(limit int) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCheckinMachineRecordDo) Offset(offset int) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCheckinMachineRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCheckinMachineRecordDo) Unscoped() IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCheckinMachineRecordDo) Create(values ...*model.UserCheckinMachineRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCheckinMachineRecordDo) CreateInBatches(values []*model.UserCheckinMachineRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCheckinMachineRecordDo) Save(values ...*model.UserCheckinMachineRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCheckinMachineRecordDo) First() (*model.UserCheckinMachineRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinMachineRecord), nil
	}
}

func (u userCheckinMachineRecordDo) Take() (*model.UserCheckinMachineRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinMachineRecord), nil
	}
}

func (u userCheckinMachineRecordDo) Last() (*model.UserCheckinMachineRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinMachineRecord), nil
	}
}

func (u userCheckinMachineRecordDo) Find() ([]*model.UserCheckinMachineRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCheckinMachineRecord), err
}

func (u userCheckinMachineRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCheckinMachineRecord, err error) {
	buf := make([]*model.UserCheckinMachineRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCheckinMachineRecordDo) FindInBatches(result *[]*model.UserCheckinMachineRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCheckinMachineRecordDo) Attrs(attrs ...field.AssignExpr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCheckinMachineRecordDo) Assign(attrs ...field.AssignExpr) IUserCheckinMachineRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCheckinMachineRecordDo) Joins(fields ...field.RelationField) IUserCheckinMachineRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCheckinMachineRecordDo) Preload(fields ...field.RelationField) IUserCheckinMachineRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCheckinMachineRecordDo) FirstOrInit() (*model.UserCheckinMachineRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinMachineRecord), nil
	}
}

func (u userCheckinMachineRecordDo) FirstOrCreate() (*model.UserCheckinMachineRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinMachineRecord), nil
	}
}

func (u userCheckinMachineRecordDo) FindByPage(offset int, limit int) (result []*model.UserCheckinMachineRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCheckinMachineRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCheckinMachineRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCheckinMachineRecordDo) Delete(models ...*model.UserCheckinMachineRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCheckinMachineRecordDo) withDO(do gen.Dao) *userCheckinMachineRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
